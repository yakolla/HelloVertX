/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sample.HelloGame.idl;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-7-1")
public class CreatureStateAck implements org.apache.thrift.TBase<CreatureStateAck, CreatureStateAck._Fields>, java.io.Serializable, Cloneable, Comparable<CreatureStateAck> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CreatureStateAck");

  private static final org.apache.thrift.protocol.TField HEADER_FIELD_DESC = new org.apache.thrift.protocol.TField("header", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField SERVER_TICK_FIELD_DESC = new org.apache.thrift.protocol.TField("serverTick", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField CREATURE_STATES_FIELD_DESC = new org.apache.thrift.protocol.TField("creatureStates", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CreatureStateAckStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CreatureStateAckTupleSchemeFactory());
  }

  public ProtocolBase header; // required
  public long serverTick; // required
  public List<CreatureState> creatureStates; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    HEADER((short)1, "header"),
    SERVER_TICK((short)2, "serverTick"),
    CREATURE_STATES((short)3, "creatureStates");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // HEADER
          return HEADER;
        case 2: // SERVER_TICK
          return SERVER_TICK;
        case 3: // CREATURE_STATES
          return CREATURE_STATES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SERVERTICK_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.HEADER, new org.apache.thrift.meta_data.FieldMetaData("header", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProtocolBase.class)));
    tmpMap.put(_Fields.SERVER_TICK, new org.apache.thrift.meta_data.FieldMetaData("serverTick", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CREATURE_STATES, new org.apache.thrift.meta_data.FieldMetaData("creatureStates", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CreatureState.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CreatureStateAck.class, metaDataMap);
  }

  public CreatureStateAck() {
  }

  public CreatureStateAck(
    ProtocolBase header,
    long serverTick,
    List<CreatureState> creatureStates)
  {
    this();
    this.header = header;
    this.serverTick = serverTick;
    setServerTickIsSet(true);
    this.creatureStates = creatureStates;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CreatureStateAck(CreatureStateAck other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetHeader()) {
      this.header = new ProtocolBase(other.header);
    }
    this.serverTick = other.serverTick;
    if (other.isSetCreatureStates()) {
      List<CreatureState> __this__creatureStates = new ArrayList<CreatureState>(other.creatureStates.size());
      for (CreatureState other_element : other.creatureStates) {
        __this__creatureStates.add(new CreatureState(other_element));
      }
      this.creatureStates = __this__creatureStates;
    }
  }

  public CreatureStateAck deepCopy() {
    return new CreatureStateAck(this);
  }

  @Override
  public void clear() {
    this.header = null;
    setServerTickIsSet(false);
    this.serverTick = 0;
    this.creatureStates = null;
  }

  public ProtocolBase getHeader() {
    return this.header;
  }

  public CreatureStateAck setHeader(ProtocolBase header) {
    this.header = header;
    return this;
  }

  public void unsetHeader() {
    this.header = null;
  }

  /** Returns true if field header is set (has been assigned a value) and false otherwise */
  public boolean isSetHeader() {
    return this.header != null;
  }

  public void setHeaderIsSet(boolean value) {
    if (!value) {
      this.header = null;
    }
  }

  public long getServerTick() {
    return this.serverTick;
  }

  public CreatureStateAck setServerTick(long serverTick) {
    this.serverTick = serverTick;
    setServerTickIsSet(true);
    return this;
  }

  public void unsetServerTick() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SERVERTICK_ISSET_ID);
  }

  /** Returns true if field serverTick is set (has been assigned a value) and false otherwise */
  public boolean isSetServerTick() {
    return EncodingUtils.testBit(__isset_bitfield, __SERVERTICK_ISSET_ID);
  }

  public void setServerTickIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SERVERTICK_ISSET_ID, value);
  }

  public int getCreatureStatesSize() {
    return (this.creatureStates == null) ? 0 : this.creatureStates.size();
  }

  public java.util.Iterator<CreatureState> getCreatureStatesIterator() {
    return (this.creatureStates == null) ? null : this.creatureStates.iterator();
  }

  public void addToCreatureStates(CreatureState elem) {
    if (this.creatureStates == null) {
      this.creatureStates = new ArrayList<CreatureState>();
    }
    this.creatureStates.add(elem);
  }

  public List<CreatureState> getCreatureStates() {
    return this.creatureStates;
  }

  public CreatureStateAck setCreatureStates(List<CreatureState> creatureStates) {
    this.creatureStates = creatureStates;
    return this;
  }

  public void unsetCreatureStates() {
    this.creatureStates = null;
  }

  /** Returns true if field creatureStates is set (has been assigned a value) and false otherwise */
  public boolean isSetCreatureStates() {
    return this.creatureStates != null;
  }

  public void setCreatureStatesIsSet(boolean value) {
    if (!value) {
      this.creatureStates = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case HEADER:
      if (value == null) {
        unsetHeader();
      } else {
        setHeader((ProtocolBase)value);
      }
      break;

    case SERVER_TICK:
      if (value == null) {
        unsetServerTick();
      } else {
        setServerTick((Long)value);
      }
      break;

    case CREATURE_STATES:
      if (value == null) {
        unsetCreatureStates();
      } else {
        setCreatureStates((List<CreatureState>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case HEADER:
      return getHeader();

    case SERVER_TICK:
      return Long.valueOf(getServerTick());

    case CREATURE_STATES:
      return getCreatureStates();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case HEADER:
      return isSetHeader();
    case SERVER_TICK:
      return isSetServerTick();
    case CREATURE_STATES:
      return isSetCreatureStates();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CreatureStateAck)
      return this.equals((CreatureStateAck)that);
    return false;
  }

  public boolean equals(CreatureStateAck that) {
    if (that == null)
      return false;

    boolean this_present_header = true && this.isSetHeader();
    boolean that_present_header = true && that.isSetHeader();
    if (this_present_header || that_present_header) {
      if (!(this_present_header && that_present_header))
        return false;
      if (!this.header.equals(that.header))
        return false;
    }

    boolean this_present_serverTick = true;
    boolean that_present_serverTick = true;
    if (this_present_serverTick || that_present_serverTick) {
      if (!(this_present_serverTick && that_present_serverTick))
        return false;
      if (this.serverTick != that.serverTick)
        return false;
    }

    boolean this_present_creatureStates = true && this.isSetCreatureStates();
    boolean that_present_creatureStates = true && that.isSetCreatureStates();
    if (this_present_creatureStates || that_present_creatureStates) {
      if (!(this_present_creatureStates && that_present_creatureStates))
        return false;
      if (!this.creatureStates.equals(that.creatureStates))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_header = true && (isSetHeader());
    list.add(present_header);
    if (present_header)
      list.add(header);

    boolean present_serverTick = true;
    list.add(present_serverTick);
    if (present_serverTick)
      list.add(serverTick);

    boolean present_creatureStates = true && (isSetCreatureStates());
    list.add(present_creatureStates);
    if (present_creatureStates)
      list.add(creatureStates);

    return list.hashCode();
  }

  @Override
  public int compareTo(CreatureStateAck other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetHeader()).compareTo(other.isSetHeader());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeader()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.header, other.header);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetServerTick()).compareTo(other.isSetServerTick());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServerTick()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverTick, other.serverTick);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreatureStates()).compareTo(other.isSetCreatureStates());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreatureStates()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creatureStates, other.creatureStates);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CreatureStateAck(");
    boolean first = true;

    sb.append("header:");
    if (this.header == null) {
      sb.append("null");
    } else {
      sb.append(this.header);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("serverTick:");
    sb.append(this.serverTick);
    first = false;
    if (!first) sb.append(", ");
    sb.append("creatureStates:");
    if (this.creatureStates == null) {
      sb.append("null");
    } else {
      sb.append(this.creatureStates);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (header != null) {
      header.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CreatureStateAckStandardSchemeFactory implements SchemeFactory {
    public CreatureStateAckStandardScheme getScheme() {
      return new CreatureStateAckStandardScheme();
    }
  }

  private static class CreatureStateAckStandardScheme extends StandardScheme<CreatureStateAck> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CreatureStateAck struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // HEADER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.header = new ProtocolBase();
              struct.header.read(iprot);
              struct.setHeaderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SERVER_TICK
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.serverTick = iprot.readI64();
              struct.setServerTickIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CREATURE_STATES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.creatureStates = new ArrayList<CreatureState>(_list0.size);
                CreatureState _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new CreatureState();
                  _elem1.read(iprot);
                  struct.creatureStates.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setCreatureStatesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CreatureStateAck struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.header != null) {
        oprot.writeFieldBegin(HEADER_FIELD_DESC);
        struct.header.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SERVER_TICK_FIELD_DESC);
      oprot.writeI64(struct.serverTick);
      oprot.writeFieldEnd();
      if (struct.creatureStates != null) {
        oprot.writeFieldBegin(CREATURE_STATES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.creatureStates.size()));
          for (CreatureState _iter3 : struct.creatureStates)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CreatureStateAckTupleSchemeFactory implements SchemeFactory {
    public CreatureStateAckTupleScheme getScheme() {
      return new CreatureStateAckTupleScheme();
    }
  }

  private static class CreatureStateAckTupleScheme extends TupleScheme<CreatureStateAck> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CreatureStateAck struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetHeader()) {
        optionals.set(0);
      }
      if (struct.isSetServerTick()) {
        optionals.set(1);
      }
      if (struct.isSetCreatureStates()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetHeader()) {
        struct.header.write(oprot);
      }
      if (struct.isSetServerTick()) {
        oprot.writeI64(struct.serverTick);
      }
      if (struct.isSetCreatureStates()) {
        {
          oprot.writeI32(struct.creatureStates.size());
          for (CreatureState _iter4 : struct.creatureStates)
          {
            _iter4.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CreatureStateAck struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.header = new ProtocolBase();
        struct.header.read(iprot);
        struct.setHeaderIsSet(true);
      }
      if (incoming.get(1)) {
        struct.serverTick = iprot.readI64();
        struct.setServerTickIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.creatureStates = new ArrayList<CreatureState>(_list5.size);
          CreatureState _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = new CreatureState();
            _elem6.read(iprot);
            struct.creatureStates.add(_elem6);
          }
        }
        struct.setCreatureStatesIsSet(true);
      }
    }
  }

}

