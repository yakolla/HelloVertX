/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sample.HelloGame.idl;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-7-24")
public class CreatureState implements org.apache.thrift.TBase<CreatureState, CreatureState._Fields>, java.io.Serializable, Cloneable, Comparable<CreatureState> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CreatureState");

  private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("camp", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField MOVING_START_TICK_FIELD_DESC = new org.apache.thrift.protocol.TField("movingStartTick", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField SPOS_FIELD_DESC = new org.apache.thrift.protocol.TField("spos", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField CPOS_FIELD_DESC = new org.apache.thrift.protocol.TField("cpos", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField GOAL_FIELD_DESC = new org.apache.thrift.protocol.TField("goal", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField SPEED_FIELD_DESC = new org.apache.thrift.protocol.TField("speed", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField DEATH_FIELD_DESC = new org.apache.thrift.protocol.TField("death", org.apache.thrift.protocol.TType.BOOL, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CreatureStateStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CreatureStateTupleSchemeFactory());
  }

  public String uid; // required
  public String type; // required
  public int camp; // required
  public long movingStartTick; // required
  public Vector3 spos; // required
  public Vector3 cpos; // required
  public Vector3 goal; // required
  public double speed; // required
  public boolean death; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    UID((short)1, "uid"),
    TYPE((short)2, "type"),
    CAMP((short)3, "camp"),
    MOVING_START_TICK((short)4, "movingStartTick"),
    SPOS((short)5, "spos"),
    CPOS((short)6, "cpos"),
    GOAL((short)7, "goal"),
    SPEED((short)8, "speed"),
    DEATH((short)9, "death");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // UID
          return UID;
        case 2: // TYPE
          return TYPE;
        case 3: // CAMP
          return CAMP;
        case 4: // MOVING_START_TICK
          return MOVING_START_TICK;
        case 5: // SPOS
          return SPOS;
        case 6: // CPOS
          return CPOS;
        case 7: // GOAL
          return GOAL;
        case 8: // SPEED
          return SPEED;
        case 9: // DEATH
          return DEATH;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CAMP_ISSET_ID = 0;
  private static final int __MOVINGSTARTTICK_ISSET_ID = 1;
  private static final int __SPEED_ISSET_ID = 2;
  private static final int __DEATH_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CAMP, new org.apache.thrift.meta_data.FieldMetaData("camp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MOVING_START_TICK, new org.apache.thrift.meta_data.FieldMetaData("movingStartTick", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SPOS, new org.apache.thrift.meta_data.FieldMetaData("spos", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Vector3.class)));
    tmpMap.put(_Fields.CPOS, new org.apache.thrift.meta_data.FieldMetaData("cpos", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Vector3.class)));
    tmpMap.put(_Fields.GOAL, new org.apache.thrift.meta_data.FieldMetaData("goal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Vector3.class)));
    tmpMap.put(_Fields.SPEED, new org.apache.thrift.meta_data.FieldMetaData("speed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DEATH, new org.apache.thrift.meta_data.FieldMetaData("death", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CreatureState.class, metaDataMap);
  }

  public CreatureState() {
  }

  public CreatureState(
    String uid,
    String type,
    int camp,
    long movingStartTick,
    Vector3 spos,
    Vector3 cpos,
    Vector3 goal,
    double speed,
    boolean death)
  {
    this();
    this.uid = uid;
    this.type = type;
    this.camp = camp;
    setCampIsSet(true);
    this.movingStartTick = movingStartTick;
    setMovingStartTickIsSet(true);
    this.spos = spos;
    this.cpos = cpos;
    this.goal = goal;
    this.speed = speed;
    setSpeedIsSet(true);
    this.death = death;
    setDeathIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CreatureState(CreatureState other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetUid()) {
      this.uid = other.uid;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    this.camp = other.camp;
    this.movingStartTick = other.movingStartTick;
    if (other.isSetSpos()) {
      this.spos = new Vector3(other.spos);
    }
    if (other.isSetCpos()) {
      this.cpos = new Vector3(other.cpos);
    }
    if (other.isSetGoal()) {
      this.goal = new Vector3(other.goal);
    }
    this.speed = other.speed;
    this.death = other.death;
  }

  public CreatureState deepCopy() {
    return new CreatureState(this);
  }

  @Override
  public void clear() {
    this.uid = null;
    this.type = null;
    setCampIsSet(false);
    this.camp = 0;
    setMovingStartTickIsSet(false);
    this.movingStartTick = 0;
    this.spos = null;
    this.cpos = null;
    this.goal = null;
    setSpeedIsSet(false);
    this.speed = 0.0;
    setDeathIsSet(false);
    this.death = false;
  }

  public String getUid() {
    return this.uid;
  }

  public CreatureState setUid(String uid) {
    this.uid = uid;
    return this;
  }

  public void unsetUid() {
    this.uid = null;
  }

  /** Returns true if field uid is set (has been assigned a value) and false otherwise */
  public boolean isSetUid() {
    return this.uid != null;
  }

  public void setUidIsSet(boolean value) {
    if (!value) {
      this.uid = null;
    }
  }

  public String getType() {
    return this.type;
  }

  public CreatureState setType(String type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public int getCamp() {
    return this.camp;
  }

  public CreatureState setCamp(int camp) {
    this.camp = camp;
    setCampIsSet(true);
    return this;
  }

  public void unsetCamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CAMP_ISSET_ID);
  }

  /** Returns true if field camp is set (has been assigned a value) and false otherwise */
  public boolean isSetCamp() {
    return EncodingUtils.testBit(__isset_bitfield, __CAMP_ISSET_ID);
  }

  public void setCampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CAMP_ISSET_ID, value);
  }

  public long getMovingStartTick() {
    return this.movingStartTick;
  }

  public CreatureState setMovingStartTick(long movingStartTick) {
    this.movingStartTick = movingStartTick;
    setMovingStartTickIsSet(true);
    return this;
  }

  public void unsetMovingStartTick() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MOVINGSTARTTICK_ISSET_ID);
  }

  /** Returns true if field movingStartTick is set (has been assigned a value) and false otherwise */
  public boolean isSetMovingStartTick() {
    return EncodingUtils.testBit(__isset_bitfield, __MOVINGSTARTTICK_ISSET_ID);
  }

  public void setMovingStartTickIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MOVINGSTARTTICK_ISSET_ID, value);
  }

  public Vector3 getSpos() {
    return this.spos;
  }

  public CreatureState setSpos(Vector3 spos) {
    this.spos = spos;
    return this;
  }

  public void unsetSpos() {
    this.spos = null;
  }

  /** Returns true if field spos is set (has been assigned a value) and false otherwise */
  public boolean isSetSpos() {
    return this.spos != null;
  }

  public void setSposIsSet(boolean value) {
    if (!value) {
      this.spos = null;
    }
  }

  public Vector3 getCpos() {
    return this.cpos;
  }

  public CreatureState setCpos(Vector3 cpos) {
    this.cpos = cpos;
    return this;
  }

  public void unsetCpos() {
    this.cpos = null;
  }

  /** Returns true if field cpos is set (has been assigned a value) and false otherwise */
  public boolean isSetCpos() {
    return this.cpos != null;
  }

  public void setCposIsSet(boolean value) {
    if (!value) {
      this.cpos = null;
    }
  }

  public Vector3 getGoal() {
    return this.goal;
  }

  public CreatureState setGoal(Vector3 goal) {
    this.goal = goal;
    return this;
  }

  public void unsetGoal() {
    this.goal = null;
  }

  /** Returns true if field goal is set (has been assigned a value) and false otherwise */
  public boolean isSetGoal() {
    return this.goal != null;
  }

  public void setGoalIsSet(boolean value) {
    if (!value) {
      this.goal = null;
    }
  }

  public double getSpeed() {
    return this.speed;
  }

  public CreatureState setSpeed(double speed) {
    this.speed = speed;
    setSpeedIsSet(true);
    return this;
  }

  public void unsetSpeed() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SPEED_ISSET_ID);
  }

  /** Returns true if field speed is set (has been assigned a value) and false otherwise */
  public boolean isSetSpeed() {
    return EncodingUtils.testBit(__isset_bitfield, __SPEED_ISSET_ID);
  }

  public void setSpeedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SPEED_ISSET_ID, value);
  }

  public boolean isDeath() {
    return this.death;
  }

  public CreatureState setDeath(boolean death) {
    this.death = death;
    setDeathIsSet(true);
    return this;
  }

  public void unsetDeath() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEATH_ISSET_ID);
  }

  /** Returns true if field death is set (has been assigned a value) and false otherwise */
  public boolean isSetDeath() {
    return EncodingUtils.testBit(__isset_bitfield, __DEATH_ISSET_ID);
  }

  public void setDeathIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEATH_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case UID:
      if (value == null) {
        unsetUid();
      } else {
        setUid((String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((String)value);
      }
      break;

    case CAMP:
      if (value == null) {
        unsetCamp();
      } else {
        setCamp((Integer)value);
      }
      break;

    case MOVING_START_TICK:
      if (value == null) {
        unsetMovingStartTick();
      } else {
        setMovingStartTick((Long)value);
      }
      break;

    case SPOS:
      if (value == null) {
        unsetSpos();
      } else {
        setSpos((Vector3)value);
      }
      break;

    case CPOS:
      if (value == null) {
        unsetCpos();
      } else {
        setCpos((Vector3)value);
      }
      break;

    case GOAL:
      if (value == null) {
        unsetGoal();
      } else {
        setGoal((Vector3)value);
      }
      break;

    case SPEED:
      if (value == null) {
        unsetSpeed();
      } else {
        setSpeed((Double)value);
      }
      break;

    case DEATH:
      if (value == null) {
        unsetDeath();
      } else {
        setDeath((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case UID:
      return getUid();

    case TYPE:
      return getType();

    case CAMP:
      return Integer.valueOf(getCamp());

    case MOVING_START_TICK:
      return Long.valueOf(getMovingStartTick());

    case SPOS:
      return getSpos();

    case CPOS:
      return getCpos();

    case GOAL:
      return getGoal();

    case SPEED:
      return Double.valueOf(getSpeed());

    case DEATH:
      return Boolean.valueOf(isDeath());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case UID:
      return isSetUid();
    case TYPE:
      return isSetType();
    case CAMP:
      return isSetCamp();
    case MOVING_START_TICK:
      return isSetMovingStartTick();
    case SPOS:
      return isSetSpos();
    case CPOS:
      return isSetCpos();
    case GOAL:
      return isSetGoal();
    case SPEED:
      return isSetSpeed();
    case DEATH:
      return isSetDeath();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CreatureState)
      return this.equals((CreatureState)that);
    return false;
  }

  public boolean equals(CreatureState that) {
    if (that == null)
      return false;

    boolean this_present_uid = true && this.isSetUid();
    boolean that_present_uid = true && that.isSetUid();
    if (this_present_uid || that_present_uid) {
      if (!(this_present_uid && that_present_uid))
        return false;
      if (!this.uid.equals(that.uid))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_camp = true;
    boolean that_present_camp = true;
    if (this_present_camp || that_present_camp) {
      if (!(this_present_camp && that_present_camp))
        return false;
      if (this.camp != that.camp)
        return false;
    }

    boolean this_present_movingStartTick = true;
    boolean that_present_movingStartTick = true;
    if (this_present_movingStartTick || that_present_movingStartTick) {
      if (!(this_present_movingStartTick && that_present_movingStartTick))
        return false;
      if (this.movingStartTick != that.movingStartTick)
        return false;
    }

    boolean this_present_spos = true && this.isSetSpos();
    boolean that_present_spos = true && that.isSetSpos();
    if (this_present_spos || that_present_spos) {
      if (!(this_present_spos && that_present_spos))
        return false;
      if (!this.spos.equals(that.spos))
        return false;
    }

    boolean this_present_cpos = true && this.isSetCpos();
    boolean that_present_cpos = true && that.isSetCpos();
    if (this_present_cpos || that_present_cpos) {
      if (!(this_present_cpos && that_present_cpos))
        return false;
      if (!this.cpos.equals(that.cpos))
        return false;
    }

    boolean this_present_goal = true && this.isSetGoal();
    boolean that_present_goal = true && that.isSetGoal();
    if (this_present_goal || that_present_goal) {
      if (!(this_present_goal && that_present_goal))
        return false;
      if (!this.goal.equals(that.goal))
        return false;
    }

    boolean this_present_speed = true;
    boolean that_present_speed = true;
    if (this_present_speed || that_present_speed) {
      if (!(this_present_speed && that_present_speed))
        return false;
      if (this.speed != that.speed)
        return false;
    }

    boolean this_present_death = true;
    boolean that_present_death = true;
    if (this_present_death || that_present_death) {
      if (!(this_present_death && that_present_death))
        return false;
      if (this.death != that.death)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_uid = true && (isSetUid());
    list.add(present_uid);
    if (present_uid)
      list.add(uid);

    boolean present_type = true && (isSetType());
    list.add(present_type);
    if (present_type)
      list.add(type);

    boolean present_camp = true;
    list.add(present_camp);
    if (present_camp)
      list.add(camp);

    boolean present_movingStartTick = true;
    list.add(present_movingStartTick);
    if (present_movingStartTick)
      list.add(movingStartTick);

    boolean present_spos = true && (isSetSpos());
    list.add(present_spos);
    if (present_spos)
      list.add(spos);

    boolean present_cpos = true && (isSetCpos());
    list.add(present_cpos);
    if (present_cpos)
      list.add(cpos);

    boolean present_goal = true && (isSetGoal());
    list.add(present_goal);
    if (present_goal)
      list.add(goal);

    boolean present_speed = true;
    list.add(present_speed);
    if (present_speed)
      list.add(speed);

    boolean present_death = true;
    list.add(present_death);
    if (present_death)
      list.add(death);

    return list.hashCode();
  }

  @Override
  public int compareTo(CreatureState other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCamp()).compareTo(other.isSetCamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.camp, other.camp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMovingStartTick()).compareTo(other.isSetMovingStartTick());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMovingStartTick()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.movingStartTick, other.movingStartTick);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpos()).compareTo(other.isSetSpos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spos, other.spos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCpos()).compareTo(other.isSetCpos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpos, other.cpos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGoal()).compareTo(other.isSetGoal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGoal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.goal, other.goal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpeed()).compareTo(other.isSetSpeed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpeed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.speed, other.speed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeath()).compareTo(other.isSetDeath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.death, other.death);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CreatureState(");
    boolean first = true;

    sb.append("uid:");
    if (this.uid == null) {
      sb.append("null");
    } else {
      sb.append(this.uid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("camp:");
    sb.append(this.camp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("movingStartTick:");
    sb.append(this.movingStartTick);
    first = false;
    if (!first) sb.append(", ");
    sb.append("spos:");
    if (this.spos == null) {
      sb.append("null");
    } else {
      sb.append(this.spos);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cpos:");
    if (this.cpos == null) {
      sb.append("null");
    } else {
      sb.append(this.cpos);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("goal:");
    if (this.goal == null) {
      sb.append("null");
    } else {
      sb.append(this.goal);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("speed:");
    sb.append(this.speed);
    first = false;
    if (!first) sb.append(", ");
    sb.append("death:");
    sb.append(this.death);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (spos != null) {
      spos.validate();
    }
    if (cpos != null) {
      cpos.validate();
    }
    if (goal != null) {
      goal.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CreatureStateStandardSchemeFactory implements SchemeFactory {
    public CreatureStateStandardScheme getScheme() {
      return new CreatureStateStandardScheme();
    }
  }

  private static class CreatureStateStandardScheme extends StandardScheme<CreatureState> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CreatureState struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // UID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.uid = iprot.readString();
              struct.setUidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.type = iprot.readString();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.camp = iprot.readI32();
              struct.setCampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MOVING_START_TICK
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.movingStartTick = iprot.readI64();
              struct.setMovingStartTickIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SPOS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.spos = new Vector3();
              struct.spos.read(iprot);
              struct.setSposIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CPOS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.cpos = new Vector3();
              struct.cpos.read(iprot);
              struct.setCposIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // GOAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.goal = new Vector3();
              struct.goal.read(iprot);
              struct.setGoalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SPEED
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.speed = iprot.readDouble();
              struct.setSpeedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // DEATH
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.death = iprot.readBool();
              struct.setDeathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CreatureState struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.uid != null) {
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeString(struct.uid);
        oprot.writeFieldEnd();
      }
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeString(struct.type);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CAMP_FIELD_DESC);
      oprot.writeI32(struct.camp);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MOVING_START_TICK_FIELD_DESC);
      oprot.writeI64(struct.movingStartTick);
      oprot.writeFieldEnd();
      if (struct.spos != null) {
        oprot.writeFieldBegin(SPOS_FIELD_DESC);
        struct.spos.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.cpos != null) {
        oprot.writeFieldBegin(CPOS_FIELD_DESC);
        struct.cpos.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.goal != null) {
        oprot.writeFieldBegin(GOAL_FIELD_DESC);
        struct.goal.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SPEED_FIELD_DESC);
      oprot.writeDouble(struct.speed);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEATH_FIELD_DESC);
      oprot.writeBool(struct.death);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CreatureStateTupleSchemeFactory implements SchemeFactory {
    public CreatureStateTupleScheme getScheme() {
      return new CreatureStateTupleScheme();
    }
  }

  private static class CreatureStateTupleScheme extends TupleScheme<CreatureState> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CreatureState struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetUid()) {
        optionals.set(0);
      }
      if (struct.isSetType()) {
        optionals.set(1);
      }
      if (struct.isSetCamp()) {
        optionals.set(2);
      }
      if (struct.isSetMovingStartTick()) {
        optionals.set(3);
      }
      if (struct.isSetSpos()) {
        optionals.set(4);
      }
      if (struct.isSetCpos()) {
        optionals.set(5);
      }
      if (struct.isSetGoal()) {
        optionals.set(6);
      }
      if (struct.isSetSpeed()) {
        optionals.set(7);
      }
      if (struct.isSetDeath()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetUid()) {
        oprot.writeString(struct.uid);
      }
      if (struct.isSetType()) {
        oprot.writeString(struct.type);
      }
      if (struct.isSetCamp()) {
        oprot.writeI32(struct.camp);
      }
      if (struct.isSetMovingStartTick()) {
        oprot.writeI64(struct.movingStartTick);
      }
      if (struct.isSetSpos()) {
        struct.spos.write(oprot);
      }
      if (struct.isSetCpos()) {
        struct.cpos.write(oprot);
      }
      if (struct.isSetGoal()) {
        struct.goal.write(oprot);
      }
      if (struct.isSetSpeed()) {
        oprot.writeDouble(struct.speed);
      }
      if (struct.isSetDeath()) {
        oprot.writeBool(struct.death);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CreatureState struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.uid = iprot.readString();
        struct.setUidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.type = iprot.readString();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.camp = iprot.readI32();
        struct.setCampIsSet(true);
      }
      if (incoming.get(3)) {
        struct.movingStartTick = iprot.readI64();
        struct.setMovingStartTickIsSet(true);
      }
      if (incoming.get(4)) {
        struct.spos = new Vector3();
        struct.spos.read(iprot);
        struct.setSposIsSet(true);
      }
      if (incoming.get(5)) {
        struct.cpos = new Vector3();
        struct.cpos.read(iprot);
        struct.setCposIsSet(true);
      }
      if (incoming.get(6)) {
        struct.goal = new Vector3();
        struct.goal.read(iprot);
        struct.setGoalIsSet(true);
      }
      if (incoming.get(7)) {
        struct.speed = iprot.readDouble();
        struct.setSpeedIsSet(true);
      }
      if (incoming.get(8)) {
        struct.death = iprot.readBool();
        struct.setDeathIsSet(true);
      }
    }
  }

}

