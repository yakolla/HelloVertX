/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class CreatureStateAck : TBase
{
  private ProtocolBase _header;
  private long _serverTick;
  private List<CreatureState> _creatureStates;

  public ProtocolBase Header
  {
    get
    {
      return _header;
    }
    set
    {
      __isset.header = true;
      this._header = value;
    }
  }

  public long ServerTick
  {
    get
    {
      return _serverTick;
    }
    set
    {
      __isset.serverTick = true;
      this._serverTick = value;
    }
  }

  public List<CreatureState> CreatureStates
  {
    get
    {
      return _creatureStates;
    }
    set
    {
      __isset.creatureStates = true;
      this._creatureStates = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool header;
    public bool serverTick;
    public bool creatureStates;
  }

  public CreatureStateAck() {
  }

  public void Read (TProtocol iprot)
  {
    TField field;
    iprot.ReadStructBegin();
    while (true)
    {
      field = iprot.ReadFieldBegin();
      if (field.Type == TType.Stop) { 
        break;
      }
      switch (field.ID)
      {
        case 1:
          if (field.Type == TType.Struct) {
            Header = new ProtocolBase();
            Header.Read(iprot);
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 2:
          if (field.Type == TType.I64) {
            ServerTick = iprot.ReadI64();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 3:
          if (field.Type == TType.List) {
            {
              CreatureStates = new List<CreatureState>();
              TList _list0 = iprot.ReadListBegin();
              for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
              {
                CreatureState _elem2;
                _elem2 = new CreatureState();
                _elem2.Read(iprot);
                CreatureStates.Add(_elem2);
              }
              iprot.ReadListEnd();
            }
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        default: 
          TProtocolUtil.Skip(iprot, field.Type);
          break;
      }
      iprot.ReadFieldEnd();
    }
    iprot.ReadStructEnd();
  }

  public void Write(TProtocol oprot) {
    TStruct struc = new TStruct("CreatureStateAck");
    oprot.WriteStructBegin(struc);
    TField field = new TField();
    if (Header != null && __isset.header) {
      field.Name = "header";
      field.Type = TType.Struct;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      Header.Write(oprot);
      oprot.WriteFieldEnd();
    }
    if (__isset.serverTick) {
      field.Name = "serverTick";
      field.Type = TType.I64;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      oprot.WriteI64(ServerTick);
      oprot.WriteFieldEnd();
    }
    if (CreatureStates != null && __isset.creatureStates) {
      field.Name = "creatureStates";
      field.Type = TType.List;
      field.ID = 3;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteListBegin(new TList(TType.Struct, CreatureStates.Count));
        foreach (CreatureState _iter3 in CreatureStates)
        {
          _iter3.Write(oprot);
        }
        oprot.WriteListEnd();
      }
      oprot.WriteFieldEnd();
    }
    oprot.WriteFieldStop();
    oprot.WriteStructEnd();
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("CreatureStateAck(");
    bool __first = true;
    if (Header != null && __isset.header) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Header: ");
      __sb.Append(Header== null ? "<null>" : Header.ToString());
    }
    if (__isset.serverTick) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ServerTick: ");
      __sb.Append(ServerTick);
    }
    if (CreatureStates != null && __isset.creatureStates) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("CreatureStates: ");
      __sb.Append(CreatureStates);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

