/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package test.idl.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-4-10")
public class test implements org.apache.thrift.TBase<test, test._Fields>, java.io.Serializable, Cloneable, Comparable<test> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("test");

  private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I16, (short)3);
  private static final org.apache.thrift.protocol.TField SHOP_FIELD_DESC = new org.apache.thrift.protocol.TField("shop", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField GOODS_FIELD_DESC = new org.apache.thrift.protocol.TField("goods", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField GOODS2_FIELD_DESC = new org.apache.thrift.protocol.TField("goods2", org.apache.thrift.protocol.TType.LIST, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new testStandardSchemeFactory());
    schemes.put(TupleScheme.class, new testTupleSchemeFactory());
  }

  public long key; // required
  public String name; // required
  public short count; // required
  public List<Integer> shop; // required
  public List<Short> goods; // required
  public List<Short> goods2; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    KEY((short)1, "key"),
    NAME((short)2, "name"),
    COUNT((short)3, "count"),
    SHOP((short)4, "shop"),
    GOODS((short)5, "goods"),
    GOODS2((short)6, "goods2");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // KEY
          return KEY;
        case 2: // NAME
          return NAME;
        case 3: // COUNT
          return COUNT;
        case 4: // SHOP
          return SHOP;
        case 5: // GOODS
          return GOODS;
        case 6: // GOODS2
          return GOODS2;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __KEY_ISSET_ID = 0;
  private static final int __COUNT_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.SHOP, new org.apache.thrift.meta_data.FieldMetaData("shop", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.GOODS, new org.apache.thrift.meta_data.FieldMetaData("goods", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16))));
    tmpMap.put(_Fields.GOODS2, new org.apache.thrift.meta_data.FieldMetaData("goods2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(test.class, metaDataMap);
  }

  public test() {
  }

  public test(
    long key,
    String name,
    short count,
    List<Integer> shop,
    List<Short> goods,
    List<Short> goods2)
  {
    this();
    this.key = key;
    setKeyIsSet(true);
    this.name = name;
    this.count = count;
    setCountIsSet(true);
    this.shop = shop;
    this.goods = goods;
    this.goods2 = goods2;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public test(test other) {
    __isset_bitfield = other.__isset_bitfield;
    this.key = other.key;
    if (other.isSetName()) {
      this.name = other.name;
    }
    this.count = other.count;
    if (other.isSetShop()) {
      List<Integer> __this__shop = new ArrayList<Integer>(other.shop);
      this.shop = __this__shop;
    }
    if (other.isSetGoods()) {
      List<Short> __this__goods = new ArrayList<Short>(other.goods);
      this.goods = __this__goods;
    }
    if (other.isSetGoods2()) {
      List<Short> __this__goods2 = new ArrayList<Short>(other.goods2);
      this.goods2 = __this__goods2;
    }
  }

  public test deepCopy() {
    return new test(this);
  }

  @Override
  public void clear() {
    setKeyIsSet(false);
    this.key = 0;
    this.name = null;
    setCountIsSet(false);
    this.count = 0;
    this.shop = null;
    this.goods = null;
    this.goods2 = null;
  }

  public long getKey() {
    return this.key;
  }

  public test setKey(long key) {
    this.key = key;
    setKeyIsSet(true);
    return this;
  }

  public void unsetKey() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __KEY_ISSET_ID);
  }

  /** Returns true if field key is set (has been assigned a value) and false otherwise */
  public boolean isSetKey() {
    return EncodingUtils.testBit(__isset_bitfield, __KEY_ISSET_ID);
  }

  public void setKeyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __KEY_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public test setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public short getCount() {
    return this.count;
  }

  public test setCount(short count) {
    this.count = count;
    setCountIsSet(true);
    return this;
  }

  public void unsetCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
  }

  /** Returns true if field count is set (has been assigned a value) and false otherwise */
  public boolean isSetCount() {
    return EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
  }

  public void setCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
  }

  public int getShopSize() {
    return (this.shop == null) ? 0 : this.shop.size();
  }

  public java.util.Iterator<Integer> getShopIterator() {
    return (this.shop == null) ? null : this.shop.iterator();
  }

  public void addToShop(int elem) {
    if (this.shop == null) {
      this.shop = new ArrayList<Integer>();
    }
    this.shop.add(elem);
  }

  public List<Integer> getShop() {
    return this.shop;
  }

  public test setShop(List<Integer> shop) {
    this.shop = shop;
    return this;
  }

  public void unsetShop() {
    this.shop = null;
  }

  /** Returns true if field shop is set (has been assigned a value) and false otherwise */
  public boolean isSetShop() {
    return this.shop != null;
  }

  public void setShopIsSet(boolean value) {
    if (!value) {
      this.shop = null;
    }
  }

  public int getGoodsSize() {
    return (this.goods == null) ? 0 : this.goods.size();
  }

  public java.util.Iterator<Short> getGoodsIterator() {
    return (this.goods == null) ? null : this.goods.iterator();
  }

  public void addToGoods(short elem) {
    if (this.goods == null) {
      this.goods = new ArrayList<Short>();
    }
    this.goods.add(elem);
  }

  public List<Short> getGoods() {
    return this.goods;
  }

  public test setGoods(List<Short> goods) {
    this.goods = goods;
    return this;
  }

  public void unsetGoods() {
    this.goods = null;
  }

  /** Returns true if field goods is set (has been assigned a value) and false otherwise */
  public boolean isSetGoods() {
    return this.goods != null;
  }

  public void setGoodsIsSet(boolean value) {
    if (!value) {
      this.goods = null;
    }
  }

  public int getGoods2Size() {
    return (this.goods2 == null) ? 0 : this.goods2.size();
  }

  public java.util.Iterator<Short> getGoods2Iterator() {
    return (this.goods2 == null) ? null : this.goods2.iterator();
  }

  public void addToGoods2(short elem) {
    if (this.goods2 == null) {
      this.goods2 = new ArrayList<Short>();
    }
    this.goods2.add(elem);
  }

  public List<Short> getGoods2() {
    return this.goods2;
  }

  public test setGoods2(List<Short> goods2) {
    this.goods2 = goods2;
    return this;
  }

  public void unsetGoods2() {
    this.goods2 = null;
  }

  /** Returns true if field goods2 is set (has been assigned a value) and false otherwise */
  public boolean isSetGoods2() {
    return this.goods2 != null;
  }

  public void setGoods2IsSet(boolean value) {
    if (!value) {
      this.goods2 = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case KEY:
      if (value == null) {
        unsetKey();
      } else {
        setKey((Long)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case COUNT:
      if (value == null) {
        unsetCount();
      } else {
        setCount((Short)value);
      }
      break;

    case SHOP:
      if (value == null) {
        unsetShop();
      } else {
        setShop((List<Integer>)value);
      }
      break;

    case GOODS:
      if (value == null) {
        unsetGoods();
      } else {
        setGoods((List<Short>)value);
      }
      break;

    case GOODS2:
      if (value == null) {
        unsetGoods2();
      } else {
        setGoods2((List<Short>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case KEY:
      return Long.valueOf(getKey());

    case NAME:
      return getName();

    case COUNT:
      return Short.valueOf(getCount());

    case SHOP:
      return getShop();

    case GOODS:
      return getGoods();

    case GOODS2:
      return getGoods2();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case KEY:
      return isSetKey();
    case NAME:
      return isSetName();
    case COUNT:
      return isSetCount();
    case SHOP:
      return isSetShop();
    case GOODS:
      return isSetGoods();
    case GOODS2:
      return isSetGoods2();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof test)
      return this.equals((test)that);
    return false;
  }

  public boolean equals(test that) {
    if (that == null)
      return false;

    boolean this_present_key = true;
    boolean that_present_key = true;
    if (this_present_key || that_present_key) {
      if (!(this_present_key && that_present_key))
        return false;
      if (this.key != that.key)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_count = true;
    boolean that_present_count = true;
    if (this_present_count || that_present_count) {
      if (!(this_present_count && that_present_count))
        return false;
      if (this.count != that.count)
        return false;
    }

    boolean this_present_shop = true && this.isSetShop();
    boolean that_present_shop = true && that.isSetShop();
    if (this_present_shop || that_present_shop) {
      if (!(this_present_shop && that_present_shop))
        return false;
      if (!this.shop.equals(that.shop))
        return false;
    }

    boolean this_present_goods = true && this.isSetGoods();
    boolean that_present_goods = true && that.isSetGoods();
    if (this_present_goods || that_present_goods) {
      if (!(this_present_goods && that_present_goods))
        return false;
      if (!this.goods.equals(that.goods))
        return false;
    }

    boolean this_present_goods2 = true && this.isSetGoods2();
    boolean that_present_goods2 = true && that.isSetGoods2();
    if (this_present_goods2 || that_present_goods2) {
      if (!(this_present_goods2 && that_present_goods2))
        return false;
      if (!this.goods2.equals(that.goods2))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_key = true;
    list.add(present_key);
    if (present_key)
      list.add(key);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_count = true;
    list.add(present_count);
    if (present_count)
      list.add(count);

    boolean present_shop = true && (isSetShop());
    list.add(present_shop);
    if (present_shop)
      list.add(shop);

    boolean present_goods = true && (isSetGoods());
    list.add(present_goods);
    if (present_goods)
      list.add(goods);

    boolean present_goods2 = true && (isSetGoods2());
    list.add(present_goods2);
    if (present_goods2)
      list.add(goods2);

    return list.hashCode();
  }

  @Override
  public int compareTo(test other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCount()).compareTo(other.isSetCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, other.count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShop()).compareTo(other.isSetShop());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShop()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shop, other.shop);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGoods()).compareTo(other.isSetGoods());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGoods()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.goods, other.goods);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGoods2()).compareTo(other.isSetGoods2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGoods2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.goods2, other.goods2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("test(");
    boolean first = true;

    sb.append("key:");
    sb.append(this.key);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("count:");
    sb.append(this.count);
    first = false;
    if (!first) sb.append(", ");
    sb.append("shop:");
    if (this.shop == null) {
      sb.append("null");
    } else {
      sb.append(this.shop);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("goods:");
    if (this.goods == null) {
      sb.append("null");
    } else {
      sb.append(this.goods);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("goods2:");
    if (this.goods2 == null) {
      sb.append("null");
    } else {
      sb.append(this.goods2);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class testStandardSchemeFactory implements SchemeFactory {
    public testStandardScheme getScheme() {
      return new testStandardScheme();
    }
  }

  private static class testStandardScheme extends StandardScheme<test> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, test struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.key = iprot.readI64();
              struct.setKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.count = iprot.readI16();
              struct.setCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SHOP
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.shop = new ArrayList<Integer>(_list0.size);
                int _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readI32();
                  struct.shop.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setShopIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // GOODS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.goods = new ArrayList<Short>(_list3.size);
                short _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = iprot.readI16();
                  struct.goods.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setGoodsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // GOODS2
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                struct.goods2 = new ArrayList<Short>(_list6.size);
                short _elem7;
                for (int _i8 = 0; _i8 < _list6.size; ++_i8)
                {
                  _elem7 = iprot.readI16();
                  struct.goods2.add(_elem7);
                }
                iprot.readListEnd();
              }
              struct.setGoods2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, test struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(KEY_FIELD_DESC);
      oprot.writeI64(struct.key);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(COUNT_FIELD_DESC);
      oprot.writeI16(struct.count);
      oprot.writeFieldEnd();
      if (struct.shop != null) {
        oprot.writeFieldBegin(SHOP_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.shop.size()));
          for (int _iter9 : struct.shop)
          {
            oprot.writeI32(_iter9);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.goods != null) {
        oprot.writeFieldBegin(GOODS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I16, struct.goods.size()));
          for (short _iter10 : struct.goods)
          {
            oprot.writeI16(_iter10);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.goods2 != null) {
        oprot.writeFieldBegin(GOODS2_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I16, struct.goods2.size()));
          for (short _iter11 : struct.goods2)
          {
            oprot.writeI16(_iter11);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class testTupleSchemeFactory implements SchemeFactory {
    public testTupleScheme getScheme() {
      return new testTupleScheme();
    }
  }

  private static class testTupleScheme extends TupleScheme<test> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, test struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetKey()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetCount()) {
        optionals.set(2);
      }
      if (struct.isSetShop()) {
        optionals.set(3);
      }
      if (struct.isSetGoods()) {
        optionals.set(4);
      }
      if (struct.isSetGoods2()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetKey()) {
        oprot.writeI64(struct.key);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetCount()) {
        oprot.writeI16(struct.count);
      }
      if (struct.isSetShop()) {
        {
          oprot.writeI32(struct.shop.size());
          for (int _iter12 : struct.shop)
          {
            oprot.writeI32(_iter12);
          }
        }
      }
      if (struct.isSetGoods()) {
        {
          oprot.writeI32(struct.goods.size());
          for (short _iter13 : struct.goods)
          {
            oprot.writeI16(_iter13);
          }
        }
      }
      if (struct.isSetGoods2()) {
        {
          oprot.writeI32(struct.goods2.size());
          for (short _iter14 : struct.goods2)
          {
            oprot.writeI16(_iter14);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, test struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.key = iprot.readI64();
        struct.setKeyIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.count = iprot.readI16();
        struct.setCountIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list15 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.shop = new ArrayList<Integer>(_list15.size);
          int _elem16;
          for (int _i17 = 0; _i17 < _list15.size; ++_i17)
          {
            _elem16 = iprot.readI32();
            struct.shop.add(_elem16);
          }
        }
        struct.setShopIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list18 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I16, iprot.readI32());
          struct.goods = new ArrayList<Short>(_list18.size);
          short _elem19;
          for (int _i20 = 0; _i20 < _list18.size; ++_i20)
          {
            _elem19 = iprot.readI16();
            struct.goods.add(_elem19);
          }
        }
        struct.setGoodsIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I16, iprot.readI32());
          struct.goods2 = new ArrayList<Short>(_list21.size);
          short _elem22;
          for (int _i23 = 0; _i23 < _list21.size; ++_i23)
          {
            _elem22 = iprot.readI16();
            struct.goods2.add(_elem22);
          }
        }
        struct.setGoods2IsSet(true);
      }
    }
  }

}

